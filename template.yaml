AWSTemplateFormatVersion: '2010-09-09'

Parameters:
  Name:
    Type: String
    Default: pipeline-for-pre-testing
  GitHubOAuthToken:
    Type: AWS::SSM::Parameter::Value<String>
    Default: pipeline-for-pre-testing-github-oauth-token
  TestingProjectName:
    Type: String
  TestingServiceRoleName:
    Type: String

Resources:
    ##   #####  #     ####    ##   ##### ###### #    #   ##   #   #
   #  #  #    # #    #    #  #  #    #   #      #    #  #  #   # #
  #    # #    # #    #      #    #   #   #####  #    # #    #   #
  ###### #####  #    #  ### ######   #   #      # ## # ######   #
  #    # #      #    #    # #    #   #   #      ##  ## #    #   #
  #    # #      #     ####  #    #   #   ###### #    # #    #   #
  RestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Ref Name
  ApiGatewayMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestApi
      HttpMethod: POST
      ResourceId: !GetAtt RestApi.RootResourceId
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WakeUpFunction.Arn}/invocations
        IntegrationHttpMethod: POST
  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref RestApi
    DependsOn: ApiGatewayMethod
  ApiGatewayStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      RestApiId: !Ref RestApi
      DeploymentId: !Ref ApiGatewayDeployment
      StageName: v1

  #        ##   #    # #####  #####    ##
  #       #  #  ##  ## #    # #    #  #  #
  #      #    # # ## # #####  #    # #    #
  #      ###### #    # #    # #    # ######
  #      #    # #    # #    # #    # #    #
  ###### #    # #    # #####  #####  #    #
  WakeUpFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
  WakeUpFunctionPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub ${Name}
      Roles:
      - !Ref WakeUpFunctionRole
      PolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Action: s3:PutObject
          Resource: !Sub "arn:aws:s3:::${S3Bucket}/*"
  WakeUpFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Code:
        ZipFile: !Sub |
          # coding: utf-8
          import json
          import boto3
          import zipfile
          def handler(event, context):
            print(json.dumps(event))
            if event.get('body') is None:
              return { 'statusCode': 200, 'message': 'None Payload' }
            payload = json.loads(event.get('body'))
            print(json.dumps(payload))
            pull_request = payload.get('pull_request', None)
            if pull_request is None:
              return { 'statusCode': 200, 'message': 'Event is not pull_request' } 
            # Upload env.sh to s3
            s3 = boto3.resource('s3')
            bucket = s3.Bucket('${S3Bucket}')
            body = "\n".join([
              "URL=%s" %             pull_request['url'],
              "HEAD_REF=%s" %        pull_request['head']['ref'],
              "HEAD_SHA=%s" %        pull_request['head']['sha'],
              "HEAD_REPO_OWNER=%s" % pull_request['head']['repo']['owner']['login'],
              "HEAD_REPO_NAME=%s" %  pull_request['head']['repo']['name'],
              "BASE_REF=%s" %        pull_request['base']['ref'],
              "BASE_SHA=%s" %        pull_request['base']['sha'],
              "BASE_REPO_OWNER=%s" % pull_request['base']['repo']['owner']['login'],
              "BASE_REPO_NAME=%s" %  pull_request['base']['repo']['name'],
            ])
            with open('/tmp/env.sh', mode = 'w') as f:
              f.write(body)
            with zipfile.ZipFile('/tmp/env.zip', 'w') as new_zip:
              new_zip.write('/tmp/env.sh', arcname = 'env.sh', compress_type = zipfile.ZIP_DEFLATED)
            bucket.upload_file('/tmp/env.zip', 'env.zip')
            return { 'statusCode': 200 }
      Role: !GetAtt WakeUpFunctionRole.Arn
      Runtime: python3.7
  WakeUpFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref WakeUpFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*/POST/"

  NotifyFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
  NotifyFunctionPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub ${Name}
      Roles:
      - !Ref NotifyFunctionRole
      PolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Action: s3:PutObject
          Resource: !Sub "arn:aws:s3:::${S3Bucket}/*"
        - Effect: Allow
          Action:
          - codepipeline:PutJobSuccessResult
          - codepipeline:PutJobFailureResult
          - codepipeline:GetJobDetails
          - codepipeline:ListActionExecutions
          Resource: "*"
        - Effect: Allow
          Action:
          - s3:GetObject
          Resource: "*"
  NotifyFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Code:
        ZipFile: !Sub |
          # coding: utf-8
          import json
          import boto3
          import zipfile
          import os
          import urllib.parse
          from datetime import datetime
          from decimal import Decimal

          code_pipeline = boto3.client('codepipeline')
          s3 = boto3.client('s3')

          def expire_encoda(object):
            if isinstance(object, datetime):
              return object.isoformat()
            if isinstance(object, Decimal):
              return float(object)

          def get_pullrequest_url(inputArtifacts):
            dict = get_github_env(inputArtifacts)
            return dict['URL']

          def get_github_env(inputArtifacts):
            for inputArtifact in inputArtifacts:
              if inputArtifact['name'] != "SourceOutput":
                continue
              print(json.dumps(inputArtifact, default = expire_encoda))
              bucket = inputArtifact['s3location']['bucket']
              key = inputArtifact['s3location']['key']
              with open('/tmp/env.zip', 'wb') as data:
                s3.download_fileobj(bucket, key, data)
              zfile = zipfile.ZipFile('/tmp/env.zip')
              for filename in zfile.namelist():
                if not os.path.basename('/tmp/' + filename):
                  os.mkdir('/tmp/' + filename)
                else:
                  with open('/tmp/' + str(filename), 'wb') as f:
                    f.write(zfile.read(filename))
            ret = {}
            if os.path.isfile('/tmp/env.sh') is True:
              f = open('/tmp/env.sh', 'r')
              lines = f.readlines()
              f.close()
              for line in lines:
                l = line.strip().split('=', 1)
                ret[l[0]] = l[1]
            return ret

          def handler(event, context):
            print(json.dumps(event))
            pipeline = event['detail']['pipeline']
            execution_id = event['detail']['execution-id']
            actions = code_pipeline.list_action_executions(
              pipelineName = pipeline,
              filter = {
                'pipelineExecutionId': execution_id
              }
            )
            print(json.dumps(actions, default = expire_encoda))
            urls = {}
            for actionExecutionDetail in actions['actionExecutionDetails']:
              if actionExecutionDetail['stageName'] == "Testing":
                print(json.dumps(actionExecutionDetail, default = expire_encoda))
                urls['testing'] = actionExecutionDetail['output']['executionResult']['externalExecutionUrl']
              elif actionExecutionDetail['stageName'] == "PreMerge":
                print(json.dumps(actionExecutionDetail, default = expire_encoda))
                url = get_pullrequest_url(actionExecutionDetail['input']['inputArtifacts'])
                urls['pullrequest'] = '/'.join([url, 'reviews'])
            print(urls)
            payload = {
              "body": "**Test was successful.**\n*ref* [CodeBuild](%s)" % urls['testing'], 
              "event": "APPROVE"
            } if event['detail']['state'] == 'SUCCEEDED' else {
              "body": "**Test failed.**\n*ref* [CodeBuild](%s)" % urls['testing'], 
              "event": "REQUEST_CHANGES"
            }
            print(payload)
            print(json.dumps(payload))
            cmd = [
              "curl",
              "-XPOST",
              "-H 'Accept:application/vnd.github.black-cat-preview+json'",
              "-H 'Authorization:token ${GitHubOAuthToken}'",
              "--data '%s'" % json.dumps(payload),
              "'%s'" % urls['pullrequest']
            ]
            delimiter = ' '
            print("cmd:%s" % delimiter.join(cmd))
            req = os.system(delimiter.join(cmd))
            print(json.dumps(req))
      Role: !GetAtt NotifyFunctionRole.Arn
      Runtime: python3.7

  #####  #####  ######    #    # ###### #####   ####  ######
  #    # #    # #         ##  ## #      #    # #    # #
  #    # #    # #####     # ## # #####  #    # #      #####
  #####  #####  #         #    # #      #####  #  ### #
  #      #   #  #         #    # #      #   #  #    # #
  #      #    # ######    #    # ###### #    #  ####  ######
  PreMerge:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Ref Name
      ServiceRole: !GetAtt PreMergeServiceRole.Arn
      Artifacts:
        Type: S3
        Location: !Ref S3Bucket
        Name: /
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/amazonlinux2-x86_64-standard:1.0
        PrivilegedMode: true
      Source:
        Type: NO_SOURCE
        BuildSpec: !Sub |
          version: 0.2
          phases:
            install:
              runtime-versions:
                python: 3.7
            pre_build:
              commands:
              - git config --global user.email pipeline-for-pre-testing@example.com
              - git config --global user.name pipeline-for-pre-testing
              - cat ./env.sh
              - source ./env.sh
            build:
              commands:
              - git clone https://${GitHubOAuthToken}:x-oauth-basic@github.com/$BASE_REPO_OWNER/$BASE_REPO_NAME repo
              - cd repo
              - git remote add head https://${GitHubOAuthToken}:x-oauth-basic@github.com/$HEAD_REPO_OWNER/$HEAD_REPO_NAME
              - git fetch head
              - git checkout -b HEAD_SHA $HEAD_SHA
              - git checkout -b BASE_SHA $BASE_SHA
              - git merge --no-commit HEAD_SHA
            post_build:
              commands:
              - rm -rf ./.git
          artifacts:
            files:
            - '**/*'
            base-directory: repo
      TimeoutInMinutes: 60
    DependsOn:
    - PreMergeManagedPolicy
  PreMergeServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - codebuild.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /service-role/
  PreMergeManagedPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Roles:
      - !Ref PreMergeServiceRole
      - !Ref TestingServiceRoleName
      PolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Action:
          - logs:CreateLogGroup
          - logs:CreateLogStream
          - logs:PutLogEvents
          Resource:
          - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/${Name}"
          - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/${Name}:*"
        - Effect: Allow
          Action:
          - s3:PutObject
          - s3:GetObject
          - s3:GetObjectVersion
          Resource:
          - !Sub "arn:aws:s3:::${S3Bucket}/*"

  #####  # #####  ###### #      # #    # ######
  #    # # #    # #      #      # ##   # #
  #    # # #    # #####  #      # # #  # #####
  #####  # #####  #      #      # #  # # #
  #      # #      #      #      # #   ## #
  #      # #      ###### ###### # #    # ######
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      VersioningConfiguration:
        Status: Enabled
  Pipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: !Ref Name
      RoleArn: !GetAtt PipelineServiceRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Ref S3Bucket
      Stages:
      - Name: Source
        Actions:
        - Name: Source
          ActionTypeId:
            Category: Source
            Owner: AWS
            Version: 1
            Provider: S3
          OutputArtifacts:
          - Name: SourceOutput
          Configuration:
            S3Bucket: !Ref S3Bucket
            S3ObjectKey: env.zip
          RunOrder: 1
      - Name: PreMerge
        Actions:
        - Name: CodeBuild
          ActionTypeId:
            Category: Build
            Owner: AWS
            Version: 1
            Provider: CodeBuild
          InputArtifacts:
          - Name: SourceOutput
          OutputArtifacts:
          - Name: PreMergeOutput
          Configuration:
            ProjectName: !Ref PreMerge
          RunOrder: 1
      - Name: Testing
        Actions:
        - Name: CodeBuild
          ActionTypeId:
            Category: Test
            Owner: AWS
            Version: 1
            Provider: CodeBuild
          InputArtifacts:
          - Name: PreMergeOutput
          OutputArtifacts:
          - Name: TestingOutput
          Configuration:
            ProjectName: !Ref TestingProjectName
          RunOrder: 1
    DependsOn:
    - PipelineManagedPolicy
  PipelineServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - codepipeline.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /service-role/
      RoleName: !Sub "codepipeline-${Name}-service-role"
  PipelineManagedPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Sub "CodePipeline-${Name}-ManagedPolicy"
      Roles:
      - !Ref PipelineServiceRole
      PolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Action:
          - s3:GetObject
          - s3:GetObjectVersion
          - s3:GetBucketVersioning
          Resource: "*"
        - Effect: Allow
          Action:
          - s3:PutObject
          Resource:
          - "arn:aws:s3:::codepipeline*"
          - "arn:aws:s3:::elasticbeanstalk*"
        - Effect: Allow
          Action:
          - codecommit:CancelUploadArchive
          - codecommit:GetBranch
          - codecommit:GetCommit
          - codecommit:GetUploadArchiveStatus
          - codecommit:UploadArchive
          Resource: "*"
        - Effect: Allow
          Action:
          - codedeploy:CreateDeployment
          - codedeploy:GetApplicationRevision
          - codedeploy:GetDeployment
          - codedeploy:GetDeploymentConfig
          - codedeploy:RegisterApplicationRevision
          Resource: "*"
        - Effect: Allow
          Action:
          - "elasticbeanstalk:*"
          - "ec2:*"
          - "elasticloadbalancing:*"
          - "autoscaling:*"
          - "cloudwatch:*"
          - "s3:*"
          - "sns:*"
          - "cloudformation:*"
          - "rds:*"
          - "sqs:*"
          - "ecs:*"
          - "iam:PassRole"
          Resource: "*"
        - Effect: Allow
          Action:
          - lambda:InvokeFunction
          - lambda:ListFunctions
          Resource: "*"
        - Effect: Allow
          Action:
          - opsworks:CreateDeployment
          - opsworks:DescribeApps
          - opsworks:DescribeCommands
          - opsworks:DescribeDeployments
          - opsworks:DescribeInstances
          - opsworks:DescribeStacks
          - opsworks:UpdateApp
          - opsworks:UpdateStack
          Resource: "*"
        - Effect: Allow
          Action:
          - cloudformation:CreateStack
          - cloudformation:DeleteStack
          - cloudformation:DescribeStacks
          - cloudformation:UpdateStack
          - cloudformation:CreateChangeSet
          - cloudformation:DeleteChangeSet
          - cloudformation:DescribeChangeSet
          - cloudformation:ExecuteChangeSet
          - cloudformation:SetStackPolicy
          - cloudformation:ValidateTemplate
          - iam:PassRole
          Resource: "*"
        - Effect: Allow
          Action:
          - codebuild:BatchGetBuilds
          - codebuild:StartBuild
          Resource: "*"
        - Effect: Allow
          Action:
          - devicefarm:ListProjects
          - devicefarm:ListDevicePools
          - devicefarm:GetRun
          - devicefarm:GetUpload
          - devicefarm:CreateUpload
          - devicefarm:ScheduleRun
          Resource: "*"

  CodePipelineEventsRule:
    Type: AWS::Events::Rule
    Properties:
      EventPattern:
        source:
        - aws.codepipeline
        detail-type:
        - CodePipeline Pipeline Execution State Change
        detail:
          state:
          - FAILED
          - SUCCEEDED
      State: ENABLED
      Targets:
      - Arn: !GetAtt NotifyFunction.Arn
        Id: NotifyFunction
  NotifyFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref NotifyFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt CodePipelineEventsRule.Arn

Outputs:
  InvokeURL:
    Value: !Sub https://${RestApi}.execute-api.${AWS::Region}.amazonaws.com/v1
